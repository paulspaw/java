// java 面向对象

//1.概念
    /**
    * @面向过程：以步骤为单位，一步步完成某一个具体的事情
    * @面向对象：以对象为单位，通过调度组合不同的对象来完成某一个事情
    * @建立面向对象思维方式：
    *          1.先整体，再局部 
    *          2.先抽象，再具体
    *          3.能做什么，再怎么做
    * @如何学习：
    *          1.掌握一门面向对象的语言语法
    *          2.熟悉面向对象的设计原则
    *          3.熟悉面向对象的设计模式
    */

//2.类与对象

    /**
    * @什么是类：抽象概念，类是一组具有相同特性（属性）与行为（方法）的事物集合 
    * @类与对象的关系：类表示一个共性的产物，是一个综合的特征。
    *               对象是一个个性的产物，是一个个体的特征。 
    * @类由属性和方法组成：
    *               属性：就相当于一个个的特征 
    *               方法：就像当于人的一个个的行为 eg.说话，吃饭，唱歌，睡觉
    */

// 3.类和对象的定义格式 🌰：DefClass.java
    class 类名 {
        属性名称;
        返回值类型 方法名称() {
        }
    }

    // 对象的定义
    //一个类要想真正的进行操作，则必须依靠对象，对象的定义格式如下：
        类名 对象名 = new 类名();
    /**
    * 如果想要访问类中的属性或方法（方法的定义），
    * 则可以依靠以下的语法方式：
    * @访问类中的属性： 对象.属性
    * @调用类中的方法：对象.方法()
    */

// 4.对象与内存分析
    栈内存，堆内存

//类与对象小结：
    1.new关键字：表示向内存申请空间，也表示实例化一个对象，创建一个对象
    2.一个对象在内存中的大小，由该对象的所有属性所占的内存大小的总和，引用类型变量在32位系统上占4个字节，64位系统上占8个字节，
        加上而外的对象隐性数据所占的大小
    3.相同的类型才能赋值
    4.不同的引用，指向同一个对象，任何一个引用改变对象的值，其他的引用都会反应出来
    5.⚠️：在确定不引用对象时要尽早是放对象，引用 = null;
    6.当一个堆中的对象没有被任何引用变量所指向时，该对象会被JVM的GC程序认为是垃圾对象，从而被回收♻️

// 5.封装性 - 三大特性之一：封装，继承，多态 🌰：DefPackage.java
    ⚠️： this. -> 表示‘当前对象的’
    封装就是隐藏实现细节，仅对外提供访问接口
    属性的封装，方法的封装，类的封装，组件的封装，模块化封装，系统级封装。

    //好处：
        1.模块化
        2.信息隐藏
        3.代码重用
        4.插件化易于调试
        5.安全性
    //缺点：
        影响执行效率
    
    //通常在一个类中，属性都私有化，并对外提供 getter 和 setter 方法

    //成员变量和局部变量
        1.在类中的位置不同
            成员变量：在类中定义
            局部变量：在方法中定义或者方法的参数
        2.在内存中的位置不同
            成员变量：在堆内存（成员变量属于对象，对象进堆内存）
            局部变量：在栈内存（局部变量属于方法，方法进栈内存）
        3.生命周期不同
            成员变量：随着对象的存在销毁而存在销毁
            局部变量：随方法调用存在，方法运行完毕就消失
        4.初始化值不同
            成员变量：有默认初始化值，引用类型默认为 null
            局部变量：没有默认初始化值，必须定义，赋值，然后才能使用
        ⚠️： 局部变量名称可以和成员变量名称一样，在方法中使用的时候采用的是“就近原则”

// 6.构造方法 🌰：ConstructionMethod.java
    定义：1.是类构造对象时调用的方法，用于对象的初始化工作
         2.构造方法是实例化一个类的对象时，也就是new的时候，最先调用的方法
    ⚠️小结：
        1.构造方法名称与类名相同，没有返回值声明（包括void）
        2.构造方法用于初始化数据（属性）
        3.每一个类中都会有一个默认的无参的构造方法
        4.如果类中有现实的构造方法，默认的构造方法无效，还想保留默认的构造方法，需要显示的写出来
        5.构造方法可以有多个，但参数不一样，称为构造方法的重载
        6.构造方法中调用language构造方法，使用this(...)，该句代码必须写在第一句
        7.构造方法之间的调用必须要有出口
        8.给对象初始化数据可以使用构造方法或setter，通常情况下，两者都会保留
        9.保留默认的构造方法（为方便一些框架代码使用反射来创建对象）
        10.private Dog(){...} 构造方法私有化，当我们的需求是为了保证该类只有一个对象时
        ❓什么时候一个类只要一个对象:
            💋:比如：工具类（没有属性的类，只有行为）并且该工具对象被频繁使用。
               权衡只用一个对象与产生多个对象的内存使用，来确定该类是否要定义为只需要一个对象

// 7.this关键字 ❕ 🌰：DefThis.java
        实现操作：
                1.调用类中的属性
                2.调用类中的方法或构造方法
                3.表示当前对象：在方法被调用的过程中，哪个对象调用了方法，在方法哪的this就表是谁
                4.类名.this 表示类名的对象（在后面的内部类会涉及到）

// 8. 值传递与引用传递 🌰：ValueDeno.java(值传递)，RefDemo.java(引用传递)，RefDemo2.java(引用传递中的string类型)
        值传递：存在栈内存，跟堆内存没有关系

// 9.对象的一对一关系 🌰：RelationOneToOne.java
        一对一，一对多，多对一，多对多

// 10.static关键字 静态 🌰：DefStatic.java
        1.用static关键字修饰一个属性 （声明为static的变量实质上就是全局变量）
        2.使用static关键字修饰一个方法 （无需本类的对象即可调用此方法）
        3.使用static关键字修饰一个类(内部类)

    //特点： 
        1.静态变量和方法不属于对象，依赖类
        2.静态变量是全局变量，生命周期从类被加载后一直到程序结束
        3.静态变量只存一份，在静态方法区中存放
        4.静态变量是本类所有对象共享一份
        5.建议不要使用对象名调用静态数据，直接使用类名调用
        6.static修饰一个方法，那么该方法属于类，不属于对象，直接用类名调用
        7.静态方法不能访问非静态属性和方法，只能访问静态的
    //限制：
        1.仅能调用其他的static方法
        2.只能访问static数据
        3.不能以任何方式引用this或者super
    //什么时候用static
        所有对象共同的属性或方法，可以定义为静态的

// 11.main方法分析 🌰：DefMain.java
        public 共有的，最大的访问权限
        static 静态的，无需创建对象
        void 没有返回值，无需象JVM返回结果
        main 方法名，固定的方法名
        String[] args 表示参数为字符串数组，可以在调用方法时传入参数

// 12.代码块

// 13.单例设计模式 🌰：SinglePatten.java
    //定义
        保证一个类仅有一个实例，并提供一个访问他的全局访问点
    //步骤
        1.构造方法私有化
        2.声明一个本类对象
        3.给外部提供一个静态方法获取对象实例
    //实现方式
        1.饿汉式：占用内存的时间长，提高效率
        2.懒汉式：1.占用内存的时间短，效率低 （建议用） -- 延迟加载（懒加载）
                 2. 多线程访问时会有安全问题（后面解决）
    //为什么要使用单例（好处）
        1.在设计一些工具类的时候，通常工具类只有方法没有属性，推荐使用单例
        2.工具类可能会被频繁调用
        3.目的是：为了节省重复创建对象所带来的内存消耗，从而提高效率
    //能否使用构造方法私有化+静态方法来替代单例？
        1.私有化+静态好处：效率高
        2.单例好处：内存节省（推荐使用）

// 14.对象数组与管理 🌰：ObjectArrays.java
    //定义
        对象数组：数组里的每一个元素都是类的对象，赋值时先定义对象，然后将对象直接赋值给数组
    //示例
        Chicken[] cs = new Chicken[10];
        使用对象数组实现多个Chicken的管理
    //动态数组：
        1.数组是一种线性数据结构
        2.数组不适合不适合删除插入操作，适合添加、查找、遍历等操作